// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Add this field
  name      String?
  role      String   @default("user") // "user", "admin"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contactSubmissions ContactSubmission[]
  luckyDrawEntries   LuckyDrawEntry[]
  
  @@map("users")
}

model University {
  id              String   @id @default(cuid())
  name            String
  country         String
  description     String
  duration        String
  tuitionFee      String   @map("tuition_fee")
  applicationFee  String   @map("application_fee")
  studyMode       String   @map("study_mode")
  englishTest     String   @map("english_test")
  website         String?
  featured        Boolean  @default(false)
  logo            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  contactSubmissions ContactSubmission[]
  courses            Course[]
  
  @@map("universities")
}

model ContactSubmission {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String
  education     String
  countryToGo   String   @map("country_to_go")
  budget        String
  timeline      String
  message       String
  universityId  String?  @map("university_id")
  sourcePage    String   @map("source_page")
  ipAddress     String   @map("ip_address")
  userAgent     String   @map("user_agent")
  processed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     @map("user_id")
  university University? @relation(fields: [universityId], references: [id])
  
  @@map("contact_submissions")
}

model LuckyDrawEntry {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  ipAddress String   @map("ip_address")
  userAgent String   @map("user_agent")
  isWinner  Boolean  @default(false)
  drawDate  DateTime? @map("draw_date")
  prize     String?
  notified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User? @relation(fields: [userId], references: [id])
  userId String? @map("user_id")
  
  @@map("lucky_draw_entries")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  content   String
  role      String?
  company   String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("testimonials")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("newsletters")
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String
  degreeType    String   @map("degree_type") // "bachelor", "master"
  duration      String
  tuitionFee    String   @map("tuition_fee")
  requirements  String
  universityId  String   @map("university_id")
  country       String   // "uk", "italy"
  featured      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  
  @@map("courses")
}

model Documentation {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // "visa", "academic", "financial", "accommodation"
  country     String   // "uk", "italy"
  required    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("documentation")
}

model ProcessStep {
  id          String   @id @default(cuid())
  title       String
  description String
  stepNumber  Int      @map("step_number")
  country     String   // "uk", "italy"
  timeline    String?
  tips        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("process_steps")
}

model B2BSubmission {
  id            String   @id @default(cuid())
  companyName   String   @map("company_name")
  contactPerson String   @map("contact_person")
  email         String
  phone         String
  serviceType   String   @map("service_type") // "partnership", "recruitment", "training", "consulting"
  message       String
  ipAddress     String   @map("ip_address")
  userAgent     String   @map("user_agent")
  processed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("b2b_submissions")
}

model Blog {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  content       String
  excerpt       String?
  featuredImage String?  @map("featured_image")
  author        String
  published     Boolean  @default(false)
  publishedAt   DateTime? @map("published_at")
  tags          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("blogs")
}